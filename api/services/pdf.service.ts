import puppeteer from "puppeteer";
import * as fs from "fs-extra";
import * as path from "path";
import * as os from "os";
import logger from "../config/logger";
import { SectionModel } from "../models/section.model";
import { ProjectModel } from "../models/project.model";

export interface PdfGenerationOptions {
  title?: string;
  projectName: string;
  projectDescription?: string;
  sections: SectionModel[];
  sectionDisplayOrder?: string[];
  footerText?: string;
  format?: "A4" | "Letter";
  margins?: {
    top?: string;
    right?: string;
    bottom?: string;
    left?: string;
  };
}

export class PdfService {
  /**
   * Génère un PDF à partir de sections avec Puppeteer et Tailwind CSS
   * @param options - Options de génération du PDF
   * @returns Chemin vers le fichier PDF temporaire généré
   */
  async generatePdf(options: PdfGenerationOptions): Promise<string> {
    const {
      title = "Document",
      projectName,
      projectDescription = "",
      sections,
      sectionDisplayOrder = options.sectionDisplayOrder,
      footerText = "Generated by Idem",
      format = "A4",
      margins = {
        top: "20mm",
        right: "15mm",
        bottom: "20mm",
        left: "15mm",
      },
    } = options;

    logger.info(
      `Generating PDF for project: ${projectName} with ${sections.length} sections`
    );

    try {
      // Trier les sections selon l'ordre spécifié
      const sortedSections = sections.sort(
        (a, b) =>
          sectionDisplayOrder!.indexOf(a.name) -
          sectionDisplayOrder!.indexOf(b.name)
      );

      // Créer le contenu HTML à partir des sections
      const htmlContent = this.generateHtmlFromSections({
        title,
        projectName,
        projectDescription,
        sections: sortedSections,
        footerText,
      });

      // Lancer Puppeteer pour générer le PDF avec timeouts étendus
      const browser = await puppeteer.launch({
        headless: true,
        args: [
          "--no-sandbox", 
          "--disable-setuid-sandbox",
          "--disable-dev-shm-usage",
          "--disable-gpu",
          "--no-first-run",
          "--disable-default-apps",
          "--disable-features=TranslateUI"
        ],
        timeout: 120000, // 2 minutes pour le lancement du navigateur
      });

      const page = await browser.newPage();

      // Injecter les scripts locaux AVANT de définir le contenu HTML
      
      // 1. Injecter Tailwind CSS
      const tailwindScriptPath = path.join(
        process.cwd(),
        "public",
        "scripts",
        "tailwind.js"
      );
      if (await fs.pathExists(tailwindScriptPath)) {
        const tailwindScript = await fs.readFile(tailwindScriptPath, "utf8");
        await page.addScriptTag({ content: tailwindScript });
        logger.info("Local Tailwind CSS script injected successfully");

        // Attendre que Tailwind soit prêt
        await page.waitForFunction('typeof window.tailwind !== "undefined"', {
          timeout: 15000, // Augmenté à 15 secondes
        });
      } else {
        logger.warn("Local Tailwind script not found, falling back to CDN");
      }

      // 2. Injecter Chart.js
      const chartjsScriptPath = path.join(
        process.cwd(),
        "public",
        "scripts",
        "chart.js"
      );
      if (await fs.pathExists(chartjsScriptPath)) {
        const chartjsScript = await fs.readFile(chartjsScriptPath, "utf8");
        await page.addScriptTag({ content: chartjsScript });
        logger.info("Local Chart.js script injected successfully");

        // Attendre que Chart.js soit prêt
        await page.waitForFunction('typeof window.Chart !== "undefined"', {
          timeout: 15000, // Augmenté à 15 secondes
        });
      } else {
        logger.warn("Local Chart.js script not found, falling back to CDN");
      }

      // Définir le contenu HTML APRÈS l'injection des scripts
      await page.setContent(htmlContent, {
        waitUntil: "networkidle0",
        timeout: 60000, // 1 minute pour le chargement du contenu
      });

      // Forcer Tailwind à traiter toutes les classes présentes dans le DOM
      await page.evaluate(() => {
        return new Promise((resolve) => {
          if (typeof (window as any).tailwind !== "undefined") {
            const tailwindInstance = (window as any).tailwind;

            // Méthode 1: Déclencher les événements de scan
            const events = ["DOMContentLoaded", "load"];
            events.forEach((eventType) => {
              const event = new Event(eventType);
              document.dispatchEvent(event);
            });

            // Méthode 2: Forcer le refresh si disponible
            if (tailwindInstance.refresh) {
              tailwindInstance.refresh();
            }

            // Méthode 3: Re-scanner manuellement le DOM
            if (tailwindInstance.process) {
              tailwindInstance.process(document.documentElement.outerHTML);
            }

            // Attendre un peu puis résoudre
            setTimeout(resolve, 2000); // Augmenté à 2 secondes
          } else {
            resolve(undefined);
          }
        });
      });

      // Attendre supplémentaire pour s'assurer que tous les styles sont appliqués
      await new Promise((resolve) => setTimeout(resolve, 1500)); // Augmenté à 1.5 secondes

      // Vérifier que les scripts sont bien chargés et fonctionnels
      const scriptsStatus = await page.evaluate(() => {
        const tailwindAvailable = typeof (window as any).tailwind !== 'undefined';
        const chartjsAvailable = typeof (window as any).Chart !== 'undefined';
        
        // Tester l'application des styles Tailwind
        let tailwindWorking = false;
        const testElement = document.querySelector(
          ".bg-white, .text-gray-800, .p-4, .mb-4"
        );
        if (testElement) {
          const computedStyle = window.getComputedStyle(testElement);
          tailwindWorking = (
            computedStyle.backgroundColor !== "" ||
            computedStyle.color !== "" ||
            computedStyle.padding !== ""
          );
        }
        
        return {
          tailwind: { available: tailwindAvailable, working: tailwindWorking },
          chartjs: { available: chartjsAvailable }
        };
      });

      // Logger le statut des scripts
      if (scriptsStatus.tailwind.available && scriptsStatus.tailwind.working) {
        logger.info("Tailwind CSS successfully loaded and styles applied");
      } else if (scriptsStatus.tailwind.available) {
        logger.warn("Tailwind CSS loaded but styles may not be fully applied");
      } else {
        logger.warn("Tailwind CSS not available in page context");
      }
      
      if (scriptsStatus.chartjs.available) {
        logger.info("Chart.js successfully loaded and available");
      } else {
        logger.warn("Chart.js not available in page context");
      }

      // Créer un fichier temporaire pour le PDF
      const tempDir = os.tmpdir();
      const pdfFileName = `pdf-${Date.now()}-${Math.random()
        .toString(36)
        .substring(7)}.pdf`;
      const pdfPath = path.join(tempDir, pdfFileName);

      // Générer le PDF avec timeout étendu
      await page.pdf({
        path: pdfPath,
        format,
        printBackground: true,
        margin: margins,
        preferCSSPageSize: true,
        displayHeaderFooter: false,
        omitBackground: false,
        timeout: 120000, // 2 minutes pour la génération PDF
      });

      await browser.close();

      logger.info(
        `Successfully generated PDF for project ${projectName} at ${pdfPath}`
      );
      return pdfPath;
    } catch (error) {
      logger.error(`Error generating PDF for project ${projectName}:`, error);
      throw error;
    }
  }

  /**
   * Trie les sections selon l'ordre spécifié
   * @param sections - Sections à trier
   * @param displayOrder - Ordre d'affichage souhaité
   * @returns Sections triées
   */
  private sortSectionsByOrder(
    sections: SectionModel[],
    displayOrder: string[]
  ): SectionModel[] {
    if (displayOrder.length === 0) {
      return sections;
    }

    return sections.sort(
      (a, b) => displayOrder.indexOf(a.name) - displayOrder.indexOf(b.name)
    );
  }

  /**
   * Génère le contenu HTML à partir des sections
   * @param options - Options de génération HTML
   * @returns Contenu HTML formaté
   */
  private generateHtmlFromSections(options: {
    title: string;
    projectName: string;
    projectDescription: string;
    sections: SectionModel[];
    footerText: string;
  }): string {
    const { title, projectName, projectDescription, sections, footerText } =
      options;

    let htmlContent = `
      <!DOCTYPE html>
      <html lang="fr">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${title} - ${projectName}</title>
        <!-- Tailwind CSS et Chart.js will be injected by Puppeteer -->
        <script>
          // Configuration des scripts - sera appliquée après injection
          function setupScripts() {
            // Configuration Tailwind
            if (typeof window.tailwind !== 'undefined') {
              window.tailwind.config = {
                theme: {
                  extend: {
                    fontFamily: {
                      'inter': ['Inter', 'sans-serif']
                    }
                  }
                },
                corePlugins: {
                  preflight: false
                }
              };
              console.log('Tailwind config applied');
            }
            
            // Configuration Chart.js (si nécessaire)
            if (typeof window.Chart !== 'undefined') {
              // Configuration globale par défaut pour Chart.js
              window.Chart.defaults.font = {
                family: 'Inter, sans-serif',
                size: 12
              };
              window.Chart.defaults.responsive = true;
              window.Chart.defaults.maintainAspectRatio = false;
              console.log('Chart.js config applied');
            }
          }
          
          // Essayer d'appliquer les configs à différents moments
          document.addEventListener('DOMContentLoaded', setupScripts);
          window.addEventListener('load', setupScripts);
          // Fallback immédiat si les scripts sont déjà chargés
          if (document.readyState === 'complete') {
            setupScripts();
          }
        </script>
        
        <style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body {
            font-family: 'Inter', system-ui, sans-serif;
          }
          
          /* Styles pour éviter la coupure des éléments */
          .section {
            page-break-inside: avoid;
            break-inside: avoid;
            display: block;
            overflow: visible;
          }
          
          .section > * {
            page-break-inside: avoid;
            break-inside: avoid;
          }
          
          .data-content {
            page-break-inside: avoid;
            break-inside: avoid;
            orphans: 3;
            widows: 3;
          }
          
          /* Forcer les sauts de page avant certains éléments si nécessaire */
          .section:not(:first-child) {
            page-break-before: auto;
            break-before: auto;
          }
          
          /* Éviter les sauts de page après les titres */
          h1, h2, h3, h4, h5, h6 {
            page-break-after: avoid;
            break-after: avoid;
            orphans: 3;
            widows: 3;
          }
          
          /* Styles spécifiques pour l'impression */
          @media print {
            .section {
              page-break-inside: avoid !important;
              break-inside: avoid !important;
            }
            
            .data-content {
              page-break-inside: avoid !important;
              break-inside: avoid !important;
            }
            
            /* Éviter les lignes orphelines et veuves */
            p, div {
              orphans: 3;
              widows: 3;
            }
          }
          
          /* Support pour les navigateurs plus anciens */
          @page {
            orphans: 3;
            widows: 3;
          }
          
          /* Supprimer les marges uniquement sur la première page */
          @page :first {
            margin: 0;
          }
        </style>
      </head>
      <body class="bg-white">
    `;

    // Ajouter chaque section
    sections.forEach((section, index) => {
      const sectionData =
        typeof section.data === "string"
          ? section.data
          : JSON.stringify(section.data, null, 2);

      // Première section (page de couverture) sans marges, autres sections avec marges
      const marginClass = index === 0 ? "" : "mb-8";

      htmlContent += `
        <div class="section ${marginClass} break-inside-avoid">
            <div class="data-content break-inside-avoid">${sectionData}</div>
        </div>
      `;
    });

    htmlContent += `
          <footer class="flex items-center justify-between px-4 py-2 mt-4 bg-gray-100 border border-gray-200 rounded-lg">
            <p class="text-sm text-gray-700">${footerText}</p>
            <div class="flex gap-x-4">
              <p class="text-sm text-gray-700">Project: <span class="font-medium">${projectName}</span></p>
              <p class="text-sm text-gray-700">|</p>
              <p class="text-sm text-gray-700"> generated on <span class="font-medium">${new Date().toLocaleDateString(
                "fr-FR",
                { year: "numeric", month: "long", day: "numeric" }
              )}</span></p>
            </div>
          </footer>
      </body>
      </html>
    `;

    return htmlContent;
  }

  /**
   * Nettoie un fichier PDF temporaire
   * @param pdfPath - Chemin vers le fichier PDF à supprimer
   */
  async cleanupTempFile(pdfPath: string): Promise<void> {
    try {
      await fs.unlink(pdfPath);
      logger.info(`Cleaned up temporary PDF file: ${pdfPath}`);
    } catch (error) {
      logger.warn(`Failed to cleanup temporary PDF file: ${pdfPath}`, error);
    }
  }
}
