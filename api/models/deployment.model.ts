// Interfaces for each component of the deployment
export interface GitRepository {
  provider: "github" | "gitlab" | "bitbucket" | "azure-repos";
  url: string;
  branch: string;
  accessToken?: string; // PAT or OAuth token (stored encrypted)
  webhookId?: string; // ID of the configured webhook
}

export interface CloudProvider {
  type: "aws" | "gcp" | "azure" | "self-hosted";
  region?: string;
  accountId?: string; // Cloud account ID (AWS account ID, GCP project ID, etc.)
  credentials?: {
    roleArn?: string; // For AWS, ARN of the IAM role to assume
    serviceAccountId?: string; // For GCP, ID of the service account
    servicePrincipalId?: string; // For Azure, ID of the service principal
    // Credentials are never stored, only the identifiers to assume roles
  };
}

export interface InfrastructureConfig {
  serviceType: "container" | "vm" | "kubernetes" | "serverless";
  resources: {
    cpu?: string; // Ex: '0.5' or '2'
    memory?: string; // Ex: '512Mi' or '2Gi'
    storage?: string; // Ex: '20Gi'
    instances?: number; // Number of instances
  };
  networking: {
    vpcId?: string;
    subnetIds?: string[];
    securityGroupIds?: string[];
    loadBalancer?: boolean;
    highAvailability?: boolean; // Multi-AZ or multi-region
    publicAccess?: boolean;
  };
  database?: {
    type?: "mysql" | "postgres" | "mongodb" | "redis" | "dynamodb";
    version?: string;
    size?: string;
    replicas?: number;
    highAvailability?: boolean;
  };
}

export interface EnvironmentVariable {
  key: string;
  value: string;
  isSecret: boolean;
  // Secrets are encrypted at rest and in transit
}

export interface DockerConfig {
  useCustomDockerfile: boolean;
  dockerfileLocation?: string; // Relative path to the repo
  baseImage?: string; // If generated by Lexis
  registryUrl?: string; // URL of the Docker registry (ECR, GCR, ACR, etc.)
  imageName: string;
  imageTag: string;
}

export interface TerraformConfig {
  stateBucketName?: string; // Name of the S3/GCS bucket for the Terraform state
  stateKey?: string; // Path to the Terraform state file in the bucket
  planApproved?: boolean; // If the plan has been approved by the user
  lastPlanOutput?: string; // Summary of the last Terraform plan (operations planned)
}

export interface PipelineStep {
  name: string;
  status: "pending" | "in-progress" | "succeeded" | "failed" | "skipped";
  startedAt?: Date;
  finishedAt?: Date;
  logs?: string; // URL of the logs or snippet
  errorMessage?: string; // Error message if failed
  aiRecommendation?: string; // AI recommendations if failed
}

export interface CostEstimation {
  monthlyCost: number;
  currency: string;
  breakdown: Record<string, number>; // Breakdown by service
  lastUpdated: Date;
}

export interface SecurityScanResult {
  severity: "critical" | "high" | "medium" | "low" | "info";
  category: string;
  description: string;
  file?: string;
  line?: number;
  recommendation?: string;
  reference?: string;
}

export interface DeploymentModel {
  id: string;
  projectId: string;
  name: string; // Friendly name for the deployment
  environment: "development" | "staging" | "production";
  status:
    | "configuring"
    | "pending"
    | "building"
    | "infrastructure-provisioning"
    | "deploying"
    | "deployed"
    | "rollback"
    | "failed"
    | "cancelled";

  // Configuration
  gitRepository?: GitRepository;
  cloudProvider?: CloudProvider;
  infrastructureConfig?: InfrastructureConfig;
  environmentVariables?: EnvironmentVariable[];
  dockerConfig?: DockerConfig;
  terraformConfig?: TerraformConfig;

  // Monitoring of the pipeline
  pipeline?: {
    currentStage: string;
    steps: PipelineStep[];
    startedAt?: Date;
    estimatedCompletionTime?: Date;
  };

  // Security and analysis
  securityScanResults?: SecurityScanResult[];
  staticCodeAnalysis?: {
    score?: number; // Code quality score (0-100)
    issues?: { severity: string; count: number }[];
    reportUrl?: string;
  };
  costEstimation?: CostEstimation;

  // Deployment details
  url?: string; // URL where the deployment can be accessed
  version?: string; // ex: commit hash or semantic version
  logs?: string; // Link to the deployment logs
  deployedAt?: Date; // Timestamp of the end of the deployment

  // Rollback management
  rollbackVersions?: string[]; // Previous versions for rollback
  lastSuccessfulDeployment?: string; // ID of the last successful deployment

  // Standard timestamps
  createdAt: Date;
  updatedAt: Date;
}
